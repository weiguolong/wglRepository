项目说明：
    db目录存放数据库模型相关的代码；
    gson存放GSON模型相关的代码；
    service包用于存放服务相关的代码；
    util包用于存放工具相关的代码。

数据库的存储：
    第一阶段我们要做的就是创建好数据库和表， 这样从服务器获取到的数据才能够存储到本地。这里使用LitePal来管理应用的数据库。
首先， 添加依赖。如下：
    compile 'org.litepal.android:core:1.3.2'  --------LitePal数据库管理
    compile 'com.squareup.okhttp3:okhttp:3.4.1' ----------网络请求
    compile 'com.google.code.gson:gson:2.7'         -----------GSON
    compile 'com.github.bumptech.glide:glide:3.7.0' -----------用于加载和展示图片

数据库设计：
    1、计划创建三张表， 分别为province / city / county , 分别对应实体类中的Province , City , County
数据库使用Litepal进行管理， 因此所有的实体类都必须继承Litepal中的DataSupport类。
    2、配置litepal.xml文件。右击app/src/main目录--new -- Directory -- ， 创建一个assets目录， 然后
在assets目录下再新建一个litepal.xml文件，且编辑,如下内容:
<litepal>
    <dbname value="china_weather" />
    <version value="1" />
    <list>
        <mapping class="com.chinaweather.android.db.Province" />
        <mapping class="com.chinaweather.android.db.City" />
        <mapping class="com.chinaweather.android.db.County" />
    </list>
</litepal>
这里指明数据库名为china_weather , 数据库的版本是1 ， 并将Province，City，County三个实体添加到映射列表中。
    3、最后配置LitePalApplication ， 修改AndroidManifest.xml中的代码如下：
    <application
            android:name="org.litepal.LitePalApplication"
            android:allowBackup="true"
            android:icon="@mipmap/psb"
            ……
    这样数据库和表都创建完成了， 数据库和表会在首次执行任意数据库操作的时候自动创建。

工具类的实现：
    一些工具类的实现， 如发起网络请求的工具类，  服务器返回结果的解析工具类。


布局功能：
    由于遍历省市县功能，我们在后面会复用， 因此这就不写在活动中， 而是卸载碎片里， 这样需要复用的时候直接在布局里
引用碎片就可以了。
    1、在res/layout目录中新建choose_area.xml布局。内容如下:
    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="#fff">
        <RelativeLayout
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary">
            <TextView
                android:id="@+id/title_text"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_centerInParent="true"
                android:textColor="#fff"
                android:textSize="20sp"/>
            <Button
                android:id="@+id/back_button"
                android:layout_width="25dp"
                android:layout_height="25dp"
                android:layout_marginLeft="10dp"
                android:layout_alignParentLeft="true"
                android:layout_centerVertical="true"
                android:background="@mipmap/back"/>
        </RelativeLayout>
        <ListView
            android:id="@+id/list_view"
            android:layout_width="match_parent"
            android:layout_height="match_parent"/>
    </LinearLayout>
    以上布局文件首先定义了一个头布局标题栏， 然后在布局中放置了TextView用于显示标题内容， button用于返回上一个活动。
之所以使用自己的标题栏， 是因为碎片中最好不要直接使用ActionBar或Toolbar， 不然在复用的时候会出现想不到的结果。
    接下来在ListView中用于显示省市县的数据，之所以使用ListView而不是RecyclerView是因为其会自动给每个子项之
间加一条分割线， 而使用RecyclerView则比较麻烦。

编写碎片：
    编写用于遍历省市县数据的碎片了，新建ChooseAreaFragment继承Fragement。
    1.当点击某个省的时候， 就会进入到ListView的onItemClick()方法中， 这个时候就会根据当前的级别来判断是去掉用
    queryCityies（）方法还是queryCounties()方法。
    2.以上写好的碎片是不能在直接在界面上显示的， 因此我们需要把它添加到活动里才可以。 修改acitivity_main.xml
如下：
    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        >
        <fragment
            android:id="@+id/choose_area_fragement"
            android:name="com.chinaweather.android.ChooseAreaFragment"
            android:layout_width="match_parent"
            android:layout_height="match_parent"/>
    </RelativeLayout>
    布局文件很简单 ， 只是定义了一个FrameLayout ， 然后把ChooseAreaFragment碎片添加进来， 并让它沾满整个
布局。另外在碎片的布局中，我们已经定义了一个标题栏， 因此就不再需要原生的ActionBar， 修改res/values/styles.xml
如下：
    <resources>
        <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
            ...
        </style>
    </resources>
    因为访问网络需要权限， 因此需要在AndroidManifest.xml中进行如下权限声明， 如下：
    <uses-permission android:name="android.permission.INTERNET" />

到此， APP可以实现省市县三级联动了。 接下来开始查询天气。

显示天气信息：
    1、根据返回的JSON串， 创建GSON实体对象。
    2、编辑天气界面：
        首先创建一个显示天气信息的活动。由于所有的天气信息都在同一个界面显示， 因此， 新建活动的布局文件将
是一个很长的布局文件。为了方便维护， 将界面的不同部分写在不同的布局文件里。再通过引入布局的方式集成到
activity_weather.xml中。
    2.1 先新建一个title.xml作为头布局（res/layout --> New --> Layout resource file）， 如下：
    <?xml version="1.0" encoding="utf-8"?>
    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize">
        <TextView
            android:id="@+id/title_city"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_centerInParent="true"
            android:textColor="#fff"
            android:textSize="20sp"/>
        <TextView
            android:id="@+id/title_update_time"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginRight="10dp"
            android:layout_alignParentRight="true"
            android:layout_centerVertical="true"
            android:textColor="#fff"
            android:textSize="16sp"/>
    </RelativeLayout>
    2.2 再新建一个now.xml作为当前的天气信息的布局， 如下：
    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="15dp">
        <TextView
            android:id="@+id/degree_text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="end"
            android:textColor="#fff"
            android:textSize="60sp"/>
        <TextView
            android:id="@+id/weather_info_text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="end"
            android:textColor="#fff"
            android:textSize="20sp"/>
    </LinearLayout>
    2.3 新建一个forecast.xml作为未来天气信息的布局， 如下代码：
    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="15dp"
        android:background="#8000">
    <!--
        最外层LinearLayout定义了一个半透明的背景，
        TextView用于定义标题，
        最里层的LinearLayout定义一个用于显示未来几天天气信息的布局， 这个布局没有任何内容， 因为这要根据
        服务器返回的数据在代码中动态添加的。
    -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginLeft="15dp"
            android:layout_marginTop="15dp"
            android:text="预报"
            android:textColor="#fff"
            android:textSize="20sp"/>
        <LinearLayout
            android:id="@+id/forecast_layout"
            android:orientation="vertical"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">
        </LinearLayout>
    </LinearLayout>

    2.4 最里层的LinearLayout定义一个用于显示未来几天天气信息的布局， 这个布局没有任何内容， 因为这要根据
服务器返回的数据在代码中动态添加的, 因此，我们还需要再定义一个未来天气的子布局， 创建forecast_item.xml文件，
如下：
    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="15dp"
        android:layout_margin="15dp">
    <!--
        子布局中有4个TextView ， 分别用于显示天气日期， 天气概况， 当天的最高气温，最低气温。
    -->
        <TextView
            android:id="@+id/date_text"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_gravity="center_vertical"
            android:layout_weight="2"
            android:textColor="#fff"
            />
        <TextView
            android:id="@+id/info_text"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_gravity="center_vertical"
            android:layout_weight="1"
            android:gravity="center"
            android:textColor="#fff"/>
        <TextView
            android:id="@+id/max_text"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:layout_weight="1"
            android:gravity="right"
            android:textColor="#fff"/>
        <TextView
            android:id="@+id/min_text"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:layout_weight="1"
            android:gravity="right"
            android:textColor="#fff"
            />
    </LinearLayout>
    2.5 然后新建一个aqi.xml用于空气质量信息的布局， 具体见代码（因太长，省略掉）：
    2.6 新建suggestion.xml用于生活建议信息的布局， 具体见代码布局。
    3、将天气界面上的每个布局文件引入到主活动布局文件activity_weather.xml中




    